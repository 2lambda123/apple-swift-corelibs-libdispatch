macro(check_compile_options warning)
  string(REPLACE "=" "-" temp_warning_variable ${warning})
  string(REGEX REPLACE "^-" "" warning_variable ${temp_warning_variable})
  check_c_compiler_flag("${warning} -Werror -Wall -O3" C_SUPPORTS_${warning_variable})
  if(${C_SUPPORTS_${warning_variable}})
    add_compile_options($<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${warning}>)
  endif()
endmacro()

if("${CMAKE_C_SIMULATE_ID}" STREQUAL "MSVC")
  # TODO: someone needs to provide the msvc equivalent warning flags
else()
  check_compile_options(-Werror)
  check_compile_options(-Wall)
  check_compile_options(-Wextra)

  check_compile_options(-Warray-bounds-pointer-arithmetic)
  check_compile_options(-Wassign-enum)
  check_compile_options(-Watomic-properties)
  check_compile_options(-Wcomma)
  check_compile_options(-Wconditional-uninitialized)
  check_compile_options(-Wconversion)
  check_compile_options(-Wcovered-switch-default)
  check_compile_options(-Wdate-time)
  check_compile_options(-Wdeprecated)
  check_compile_options(-Wdocumentation)
  check_compile_options(-Wdouble-promotion)
  check_compile_options(-Wduplicate-enum)
  check_compile_options(-Wexpansion-to-defined)
  check_compile_options(-Wfloat-equal)
  check_compile_options(-Widiomatic-parentheses)
  check_compile_options(-Winfinite-recursion)
  check_compile_options(-Wmissing-prototypes)
  check_compile_options(-Wnewline-eof)
  check_compile_options(-Wnullable-to-nonnull-conversion)
  check_compile_options(-Wobjc-interface-ivars)
  check_compile_options(-Wover-aligned)
  check_compile_options(-Wpacked)
  check_compile_options(-Wpointer-arith)
  check_compile_options(-Wselector)
  check_compile_options(-Wshadow)
  check_compile_options(-Wshorten-64-to-32)
  check_compile_options(-Wsign-conversion)
  check_compile_options(-Wstatic-in-inline)
  check_compile_options(-Wsuper-class-method-mismatch)
  check_compile_options(-Wswitch)
  check_compile_options(-Wunguarded-availability)
  check_compile_options(-Wunreachable-code)
  check_compile_options(-Wunused)

  check_compile_options(-Wno-unknown-warning-option)
  check_compile_options(-Wno-trigraphs)
  check_compile_options(-Wno-four-char-constants)
  check_compile_options(-Wno-disabled-macro-expansion)
  check_compile_options(-Wno-pedantic)
  check_compile_options(-Wno-bad-function-cast)
  check_compile_options(-Wno-c++-compat)
  check_compile_options(-Wno-c++98-compat)
  check_compile_options(-Wno-c++98-compat-pedantic)
  check_compile_options(-Wno-cast-align)
  check_compile_options(-Wno-cast-qual)
  check_compile_options(-Wno-documentation-unknown-command)
  check_compile_options(-Wno-format-nonliteral)
  check_compile_options(-Wno-missing-variable-declarations)
  check_compile_options(-Wno-old-style-cast)
  check_compile_options(-Wno-padded)
  check_compile_options(-Wno-reserved-id-macro)
  check_compile_options(-Wno-shift-sign-overflow)
  check_compile_options(-Wno-undef)
  check_compile_options(-Wno-unreachable-code-aggressive)
  check_compile_options(-Wno-unused-macros)
  check_compile_options(-Wno-used-but-marked-unused)
  check_compile_options(-Wno-void-pointer-to-int-cast)
  check_compile_options(-Wno-vla)

  if(CMAKE_SYSTEM_NAME STREQUAL Android)
    check_compile_options(-Wno-incompatible-function-pointer-types)
    check_compile_options(-Wno-implicit-function-declaration)
    check_compile_options(-Wno-conversion)
    check_compile_options(-Wno-int-conversion)
    check_compile_options(-Wno-shorten-64-to-32)
  endif()
  check_compile_options(-Wno-error=assign-enum)
endif()
